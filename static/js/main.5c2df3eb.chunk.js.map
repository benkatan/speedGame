{"version":3,"sources":["home/home.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","startClock","S","Date","interval","setInterval","setState","clock","state","show","playGrid","currentValue","isFinished","numberOfDives","this","setDivNumbers","array","sort","Math","random","startNumber","items","numbers","index","push","shuffle","key","className","onClick","event","handleNumberClick","length","console","log","value","item","splice","target","classList","add","replaceItem","stopClock","removeItem","clearInterval","reset","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5c2df3eb.chunk.js","sourcesContent":["import React from 'react';\n\nimport './home.style.scss';\n\nexport default class Home extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            show: false,\n            playGrid: [],\n            currentValue: null,\n            clock: 0.0,\n            isFinished: false\n        }\n\n        this.interval = null;\n        this.numberOfDives = 50;\n    }\n\n    componentDidMount() {\n        this.setDivNumbers(0);\n    }\n\n    shuffle(array) {\n        array.sort(() => Math.random() - 0.5);\n        return array;\n    }\n\n    setDivNumbers(startNumber) {\n        const items = [];\n        let numbers = [];\n\n        for (let index = startNumber; index < startNumber + (this.numberOfDives / 2); index++) {\n            numbers.push(index + 1);\n        }\n\n\n        numbers = this.shuffle(numbers);\n\n        for (let index = 0; index < numbers.length; index++) {\n            items.push(\n                <div key={index + startNumber} className='squre1 ' onClick={(event) => this.handleNumberClick(event, index, numbers[index])}>\n                    {numbers[index]}\n                </div>\n            )\n        }\n\n        this.setState({ playGrid: items }, () => {\n            console.log(this.state.playGrid);\n        });\n    }\n\n    replaceItem(index, value) {\n        const item = <div key={this.numberOfDives - index - 1} className='squre1' onClick={(event) => this.handleNumberClick(event, this.numberOfDives - index - 1, this.numberOfDives - value + 1)}>\n            {this.numberOfDives - value + 1}\n        </div>\n\n        const items = this.state.playGrid;\n        items.splice(index, 1, item);\n        this.setState({ playGrid: items });\n    }\n\n    removeItem(event) {\n        event.target.classList.add('remove');\n    }\n\n    handleNumberClick(event, index, value) {\n        console.log('handle number click');\n        if (!this.state.currentValue) {\n            this.startClock();\n            if (value == 1) {\n                this.setState({ currentValue: 1 });\n                this.replaceItem(index, value);\n\n            }\n        } else {\n\n            if (this.state.currentValue + 1 == value) {\n                this.setState({ currentValue: value });\n\n                if (value <= this.numberOfDives / 2) {\n\n                    this.replaceItem(index, value);\n                    if (value == (this.numberOfDives / 2)) {\n                        this.setDivNumbers(value);\n                    }\n                } else {\n                    if (value == this.numberOfDives) {\n                        this.stopClock();\n                        this.setState({ isFinished: true });\n                        this.removeItem(event, index, value);\n                        return;\n                    }\n                    this.removeItem(event, index, value);\n                }\n            }\n        }\n    }\n\n    reset() {\n        this.stopClock();\n        this.setState({\n            show: false,\n            playGrid: [],\n            currentValue: null,\n            clock: 0.0,\n            isFinished: false\n        }, () => {\n            this.setDivNumbers(0);\n        });\n\n    }\n\n    startClock = () => {\n        const S = new Date();\n        this.interval = setInterval(() => {\n            this.setState({ clock: (new Date() - S) / 1e3 });\n        }, 10);\n    }\n\n    stopClock() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        const { playGrid, clock, isFinished, currentValue } = this.state;\n        return (\n            <div className=\"home-warraper animated fadeIn\">\n                <div className='clock'>\n                    {clock}\n                </div>\n                <div className='reset-btn'>\n                    {currentValue}\n                </div>\n                <div className='reset-btn'>\n                    <button onClick={() => this.reset()}> Reset</button>\n                </div>\n                <div className='grid'>{playGrid}</div>\n\n                {\n                    isFinished ?\n                        <div className='result-score'>\n                            <h1>Your score: {clock} seconds</h1>\n                        </div> : null\n                }\n\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.scss';\n\nimport Home from './home/home.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}